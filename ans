Q1.Write code for a simple user registration form for an event using Flask and Docker in DevOps & Q2.Develop a simple web application using Flask that allows users to register for an event. Containerize the application using Docker and run it in a Docker container

Q1/
├── app/
│   ├── app.py
│   └── templates/
│       └── register.html
├── Dockerfile
└── requirements.txt

1. app/app.py

from flask import Flask, render_template, request

app = Flask(__name__)

@app.route('/')
def registration_form():
    return render_template('register.html')

@app.route('/register', methods=['POST'])
def register():
    name = request.form['name']
    email = request.form['email']
    event = request.form['event']
    return f"Thanks {name} for registering for {event}! Confirmation sent to {email}."

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)


2. app/templates/register.html

<!DOCTYPE html>
<html>
  <head>
    <title>Event Registration</title>
  </head>
  <body>
    <h2>Register for the Event</h2>
    <form action="/register" method="post">
      Name: <input type="text" name="name" required /><br /><br />
      Email: <input type="email" name="email" required /><br /><br />
      Event:
      <select name="event">
        <option value="TechTalk">Tech Talk</option>
        <option value="Workshop">Workshop</option>
        <option value="Hackathon">Hackathon</option></select
      ><br /><br />
      <input type="submit" value="Register" />
    </form>
  </body>
</html>


3. requirements.txt

Flask==2.3.2

4. Dockerfile

FROM python:3.10-slim

WORKDIR /app

COPY requirements.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

COPY app/ /app/

EXPOSE 5000

CMD ["python", "app.py"]

✅ Docker Commands (Final Execution)
1. 🔨 Build the Docker Image (inside Q1 folder)

docker build -t q1-app .

2. ▶️ Run the Docker Container

docker run -p 5000:5000 q1-app

3. 🌐 Access the Web App
Open your browser and go to:

http://localhost:5000

**************************************************************
Q3.Implement GitHub Actions CI/CD for a Python/Flask app.

✅ Step 1: Final Project Structure
Here is how your Q3/ folder should now look:

Q3/
├── app/
│   ├── app.py
│   └── templates/
│       └── register.html
├── tests/
│   └── test_app.py
├── requirements.txt
├── Dockerfile
└── .github/
    └── workflows/
        └── ci-cd.yml

******register.html*****
<!DOCTYPE html>
<html>
  <head>
    <title>Event Registration</title>
  </head>
  <body>
    <h2>Register for the Event</h2>
    <form action="/register" method="post">
      Name: <input type="text" name="name" required /><br /><br />
      Email: <input type="email" name="email" required /><br /><br />
      Event:
      <select name="event">
        <option value="TechTalk">Tech Talk</option>
        <option value="Workshop">Workshop</option>
        <option value="Hackathon">Hackathon</option></select
      ><br /><br />
      <input type="submit" value="Register" />
    </form>
  </body>
</html>

**********test_app.py********

import sys
import os
import pytest

# Add the /app directory to the Python path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'app')))

from app import app  # ✅ import app.py inside app/ folder

@pytest.fixture
def client():
    app.testing = True
    return app.test_client()

def test_index_page(client):
    response = client.get('/')
    assert response.status_code == 200
    assert b"Register for the Event" in response.data

def test_register_success(client):
    response = client.post('/register', data={
        'name': 'Alice',
        'email': 'alice@example.com',
        'event': 'Tech Talk'
    })
    assert response.status_code == 200
    assert b"Thanks Alice for registering for Tech Talk!" in response.data

def test_register_missing_data(client):
    response = client.post('/register', data={
        'name': 'Bob'
    })
    assert response.status_code == 400
    assert b"Missing data" in response.data  # Matches actual app response

**********requirements.txt*****************

Flask==2.3.2
pytest
werkzeug==2.3.8

*********app.py**********

from flask import Flask, render_template, request

app = Flask(__name__)

@app.route('/')
def registration_form():
    return render_template('register.html')

@app.route('/register', methods=['POST'])
def register():
    name = request.form.get('name')
    email = request.form.get('email')
    event = request.form.get('event')

    if not name or not email or not event:
        return "Missing data", 400

    return f"Thanks {name} for registering for {event}! Confirmation sent to {email}."

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

*********Dockerfile**************

FROM python:3.10-slim

WORKDIR /app

COPY app/ /app/app/
COPY requirements.txt .

RUN pip install --no-cache-dir -r requirements.txt

EXPOSE 5000

CMD ["python", "app/app.py"]


**********ci-cd.yml*********

name: CI/CD for Flask App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests
        run: pytest tests/

  cd:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/q1-app:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/q1-app:latest

***STEP 2: Initialize Git locally (run these in VS Code terminal)

git init
git remote add origin https://github.com/YOUR_USERNAME/event-registration-flask.git
git add .
git commit -m "Initial commit with Flask app and CI/CD pipeline"
git branch -M main
git push -u origin main

*************STEP 3: Add GitHub Secrets (Docker credentials)
Go to your repository on GitHub

Click Settings → Secrets and variables → Actions

Click New repository secret

Name: DOCKER_USERNAME

Value: Your DockerHub username

Add another:

Name: DOCKER_PASSWORD

Value: Your DockerHub password or access token

*************Verify the ci/cd pipeline in the actions tab in GitHub repo and q1-app will be created in the dockerhub.

******Q4. Create a Flask application and push the code to GitHub.

flask_app/
│
├── app.py           # Flask backend logic
├── templates/       # Folder to store HTML templates
│   └── index.html   # HTML template for the front-end
├── static/          # Folder for static assets (CSS, images, etc.)
│   └── style.css    # Custom CSS for styling
└── requirements.txt # List of dependencies

Step 1: Install Required Packages
Before starting, you’ll need to install Flask. Run the following command to install Flask:

pip install flask

Step 2: Create Flask App (app.py)
Create a file named app.py in your project folder (flask_app/):

from flask import Flask, render_template, request

app = Flask(__name__)

# Home route
@app.route('/')
def home():
    return render_template('index.html')

# Route for handling form submission
@app.route('/greet', methods=['POST'])
def greet():
    if request.method == 'POST':
        name = request.form['name']
        age = request.form['age']
        return render_template('index.html', name=name, age=age)

if __name__ == '__main__':
    app.run(debug=True)

Step 3: Create HTML Template (templates/index.html)
Create a folder named templates in your project folder and add an index.html file inside it:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flask App</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Welcome to My Flask App!</h1>

        <form action="/greet" method="post">
            <label for="name">Enter Your Name:</label>
            <input type="text" id="name" name="name" required>

            <label for="age">Enter Your Age:</label>
            <input type="number" id="age" name="age" required>

            <button type="submit">Submit</button>
        </form>

        {% if name %}
        <div class="greeting">
            <p>Hello, {{ name }}! You are {{ age }} years old.</p>
        </div>
        {% endif %}
    </div>
</body>
</html>

Step 4: Create CSS for Styling (static/style.css)
Create a folder named static in your project folder and add a style.css file inside it. This will contain the styling for the page:

body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
}

.container {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    padding: 20px;
    width: 300px;
    text-align: center;
}

h1 {
    color: #333;
}

form {
    margin-top: 20px;
}

label {
    display: block;
    margin: 10px 0 5px;
    text-align: left;
}

input[type="text"], input[type="number"] {
    width: 100%;
    padding: 10px;
    margin: 5px 0 20px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

button {
    background-color: #4CAF50;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    width: 100%;
}

button:hover {
    background-color: #45a049;
}

.greeting {
    margin-top: 20px;
    font-size: 1.2em;
    color: #333;
}

Step 5: Add Dependencies (requirements.txt)
Create a file named requirements.txt in your project folder. This will help in tracking the necessary Python packages:

flask
Step 6: Run the Flask App
Open a terminal in your project folder.

Run the Flask app using the command:

python app.py

Open your browser and go to http://127.0.0.1:5000/ to see the app.

Open the VS Code terminal.

Initialize a Git repository in your project folder:


git init

Add all files to the Git repository:
git add .

Commit the changes:
git commit -m "Initial commit with Flask app"

Create a GitHub Repository
Go to GitHub and log in.

Create a new repository by clicking on New.

Fill in the repository name and click Create repository.

GitHub will provide you with the repository URL, which looks like:

https://github.com/username/repository-name.git

Push the Code to GitHub
In the VS Code terminal, add the remote GitHub repository:

git remote add origin https://github.com/username/repository-name.git

Push your code to GitHub:
git push -u origin master

***************Q16
Steps to run the code

docker build -t node-docker-demo .

docker run -p 3000:3000 node-docker-demo

Verify Output in Browser or Curl
Open browser and go to:

http://localhost:3000/
